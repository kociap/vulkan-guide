<svg width="1000" height="700" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="computeGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#FF5722;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#D84315;stop-opacity:0.8" />
    </linearGradient>
    <linearGradient id="indirectGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#3F51B5;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#1A237E;stop-opacity:0.8" />
    </linearGradient>
    <linearGradient id="cullingGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#9C27B0;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#6A1B9A;stop-opacity:0.8" />
    </linearGradient>
    <marker id="arrow" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
    </marker>
  </defs>
  
  <!-- Title -->
  <text x="500" y="30" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="#333">
    Draw Indirect Pipeline with GPU Culling
  </text>
  
  <!-- Input: Chunk Array -->
  <rect x="50" y="70" width="200" height="80" fill="url(#cullingGradient)" rx="8" stroke="#6A1B9A" stroke-width="2"/>
  <text x="150" y="95" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">
    ChunkDrawInfo Array
  </text>
  <text x="150" y="115" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    Up to 400,000 chunks
  </text>
  <text x="150" y="135" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    CPU → GPU sync
  </text>
  
  <!-- Compute Culling Shader -->
  <rect x="350" y="70" width="200" height="80" fill="url(#computeGradient)" rx="8" stroke="#D84315" stroke-width="2"/>
  <text x="450" y="95" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">
    Compute Cull Shader
  </text>
  <text x="450" y="115" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    [numthreads(256, 1, 1)]
  </text>
  <text x="450" y="135" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    Frustum + Distance
  </text>
  
  <!-- Output: Draw Commands -->
  <rect x="650" y="70" width="200" height="80" fill="url(#indirectGradient)" rx="8" stroke="#1A237E" stroke-width="2"/>
  <text x="750" y="95" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">
    Draw Commands
  </text>
  <text x="750" y="115" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    + Indirect Count
  </text>
  <text x="750" y="135" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    Atomic counter
  </text>
  
  <!-- Flow arrows -->
  <line x1="250" y1="110" x2="350" y2="110" stroke="#666" stroke-width="3" marker-end="url(#arrow)"/>
  <line x1="550" y1="110" x2="650" y2="110" stroke="#666" stroke-width="3" marker-end="url(#arrow)"/>
  
  <!-- Detailed flow -->
  <text x="500" y="200" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#333">
    Detailed Pipeline Flow
  </text>
  
  <!-- Step 1 -->
  <g>
    <circle cx="100" cy="250" r="20" fill="#9C27B0" stroke="white" stroke-width="2"/>
    <text x="100" y="257" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">1</text>
    <text x="200" y="255" font-family="Arial, sans-serif" font-size="12" fill="#333">Input chunk data (position, type, drawcount, index)</text>
  </g>
  
  <!-- Step 2 -->
  <g>
    <circle cx="100" cy="290" r="20" fill="#FF5722" stroke="white" stroke-width="2"/>
    <text x="100" y="297" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">2</text>
    <text x="250" y="295" font-family="Arial, sans-serif" font-size="12" fill="#333">IsVisible() check: frustum culling + distance culling</text>
  </g>
  
  <!-- Step 3 -->
  <g>
    <circle cx="100" cy="330" r="20" fill="#3F51B5" stroke="white" stroke-width="2"/>
    <text x="100" y="337" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">3</text>
    <text x="280" y="335" font-family="Arial, sans-serif" font-size="12" fill="#333">atomicAdd(drawCount[0], 1) to get unique slot</text>
  </g>
  
  <!-- Step 4 -->
  <g>
    <circle cx="100" cy="370" r="20" fill="#4CAF50" stroke="white" stroke-width="2"/>
    <text x="100" y="377" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">4</text>
    <text x="320" y="375" font-family="Arial, sans-serif" font-size="12" fill="#333">Fill ChunkDrawIndirect: chunk pos, draw params, vertex offset</text>
  </g>
  
  <!-- Compute Shader Code -->
  <rect x="450" y="230" width="500" height="180" fill="rgba(0,0,0,0.05)" stroke="#666" rx="5"/>
  <text x="460" y="250" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#333">
    Compute Shader Pseudocode:
  </text>
  <text x="460" y="270" font-family="Courier, monospace" font-size="10" fill="#333">
    uint idx = threadId.x;
  </text>
  <text x="460" y="285" font-family="Courier, monospace" font-size="10" fill="#333">
    if (idx &lt; chunkCount &amp;&amp; chunkInfo[idx].drawcount &gt; 0) {
  </text>
  <text x="470" y="300" font-family="Courier, monospace" font-size="10" fill="#333">
    if (IsVisible(chunkInfo[idx], sceneData[0])) {
  </text>
  <text x="480" y="315" font-family="Courier, monospace" font-size="10" fill="#333">
    uint drawIdx = atomicAdd(drawCount[0], 1);
  </text>
  <text x="480" y="330" font-family="Courier, monospace" font-size="10" fill="#333">
    drawCommands[drawIdx].chunkx = chunkInfo[idx].position_x;
  </text>
  <text x="480" y="345" font-family="Courier, monospace" font-size="10" fill="#333">
    drawCommands[drawIdx].indexCount = chunkInfo[idx].drawcount * 6;
  </text>
  <text x="480" y="360" font-family="Courier, monospace" font-size="10" fill="#333">
    drawCommands[drawIdx].vertexOffset = chunkInfo[idx].index * 4;
  </text>
  <text x="470" y="375" font-family="Courier, monospace" font-size="10" fill="#333">
    }
  </text>
  <text x="460" y="390" font-family="Courier, monospace" font-size="10" fill="#333">
    }
  </text>
  
  <!-- Draw Indirect Structure -->
  <rect x="50" y="450" width="400" height="120" fill="rgba(63,81,181,0.1)" stroke="#3F51B5" rx="5"/>
  <text x="60" y="475" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#3F51B5">
    ChunkDrawIndirect Structure:
  </text>
  <text x="70" y="495" font-family="Courier, monospace" font-size="11" fill="#333">
    uint32_t indexCount;     // triangles * 3
  </text>
  <text x="70" y="510" font-family="Courier, monospace" font-size="11" fill="#333">
    uint32_t instanceCount;  // always 1
  </text>
  <text x="70" y="525" font-family="Courier, monospace" font-size="11" fill="#333">
    uint32_t firstIndex;     // always 0
  </text>
  <text x="70" y="540" font-family="Courier, monospace" font-size="11" fill="#333">
    int32_t vertexOffset;    // offset into gigabuffer
  </text>
  <text x="70" y="555" font-family="Courier, monospace" font-size="11" fill="#333">
    int32_t chunkx, chunky, chunkz;  // world position
  </text>
  
  <!-- Performance Benefits -->
  <rect x="500" y="450" width="450" height="120" fill="rgba(76,175,80,0.1)" stroke="#4CAF50" rx="5"/>
  <text x="510" y="475" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#4CAF50">
    Performance Benefits:
  </text>
  <text x="520" y="495" font-family="Arial, sans-serif" font-size="11" fill="#333">
    • GPU culling scales to 400,000+ chunks
  </text>
  <text x="520" y="510" font-family="Arial, sans-serif" font-size="11" fill="#333">
    • Shared cull results: main view + shadow passes
  </text>
  <text x="520" y="525" font-family="Arial, sans-serif" font-size="11" fill="#333">
    • Atomic operations prevent race conditions
  </text>
  <text x="520" y="540" font-family="Arial, sans-serif" font-size="11" fill="#333">
    • Vertex offset enables per-chunk data in gigabuffer
  </text>
  <text x="520" y="555" font-family="Arial, sans-serif" font-size="11" fill="#333">
    • Simple 1:1 chunk to draw command mapping
  </text>
  
  <!-- Final Draw -->
  <rect x="300" y="600" width="400" height="60" fill="rgba(255,152,0,0.8)" rx="8" stroke="#E65100" stroke-width="2"/>
  <text x="500" y="625" font-family="Arial, sans-serif" font-size="14" font-weight="bold" text-anchor="middle" fill="white">
    vkCmdDrawIndexedIndirect()
  </text>
  <text x="500" y="645" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white">
    GPU executes only visible chunks
  </text>
  
  <!-- Arrow to final draw -->
  <line x1="500" y1="410" x2="500" y2="600" stroke="#666" stroke-width="3" marker-end="url(#arrow)"/>
</svg>